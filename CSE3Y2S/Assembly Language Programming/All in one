;;;;;;;;;;;;;;;;;;;;;;;;;;;;;summation of n = 3+2+1
.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output db 10,13,'sum = $'
   
   sum db '0'
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    lea dx,input
    mov ah,9 
    int 21h 
    
    ;take input
    mov ah ,1
    int 21h 
    
    ;checkis it 0
    
    cmp al,'0'
    je result
    
    ; 
    xor cx,cx
    mov cl,al
    sub cl,48
    
    
    loop_: 
    add sum,cl
    Loop loop_:
    
    
    
    result: 
    mov ah,9
    lea dx,output
    int 21h
    
    mov ah,2
    mov dl,sum
    int 21h
    
    
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN

;;;;;;;;;;;;;;;;;;;;;


FACTORILA OF A NUMBER ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output db 10,13,'fact  = $'
  
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    int 21h 
    
   
    
    ;converting to digit
    sub al,48 
    ;initialization
    xor cx,cx 
    mov cl,al
    mov al,1  
    mov bl,1
    
    ;check input is it zero
    cmp cl,0
    je result
   
    
    
    
    fact: 
    mul cl ;al=al*cl
    Loop fact
    
     
    
    
    mov bl,al 
    result: 
    mov ah,9
    lea dx,output
    int 21h
     
                          
                          
    ;converting to ascchi
    add bl,48
    mov ah,2
    mov dl,bl
    int 21h
    

    
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;























;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CHECK A NUMBER IS EVEN OR ODD










.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output1 db 10,13,'The number os odd $' 
   output2 db 10,13,'The number os even $'
  
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    int 21h  
    
    
    test al,1
    jz even
    
    odd: 
        
        mov ah,9
        lea dx,output1
        int 21h 
        jmp exit
    even:
    
        mov ah,9
        lea dx,output2
        int 21h

    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN








;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   CHECK PRIME OR NOT;;;;;;;;;;;;;;;;;;;;;;;;



.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output1 db 10,13,'The number is prime $' 
   output2 db 10,13,'The number is not prime $'
   n db ?
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    int 21h
    
    ;ascci to digit and initialization
    sub al,48
    mov n,al
    mov ah,0   
    xor cx,cx
    mov cl,al
    sub cl,1
    
    check:
      cmp cl,1
      je result  
      div cl ; (quotioent)al=ax/bl, (remainder)ah= ax % bl
      cmp ah,0 
      jz not_prime
      
      xor ax,ax
      mov al,n 
      
     Loop check
    
      
   result: 
   
   prime:
       mov ah,9
       lea dx,output1
       int 21h
       jmp exit 
       
   not_prime:
     mov ah,9
     lea dx,output2
     int 21h 
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;FIND A LARGEST NUMBER *****************************************
.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output db 10,13,'The largest number is :  $' 

   n db '0'
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    INPUT_: 
     
        INT 21H
        CMP AL,13 ;IF ENTER IS PRESSED
        JE END_INPUT    
        
        CMP n,AL 
        JL UPDATE 
        
        JMP INPUT_  
        
    UPDATE:
     mov n,AL
     jmp INPUT_
      
        
    END_INPUT: 
 
   
     MOV AH,9
     LEA DX,output
     int 21h
     
     
     mov dl,n
     mov ah,2
     int 21H
 
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN

;************************************************************

;SORTING ASCENDING

.model small
.stack 100h
.data  
   input db 'Enter a input string(1-3): $'
   output db 10,13,'The acsending order is :  $' 
   
   arr db 100 dup('$')
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    ;initialization
    
    mov si,0
    mov di,0
    
    
    ;take input
    mov ah,1
    INPUT_: 
        
        int 21h
        cmp al,13   ;if enter key is pressed
        je END_INPUT
        
        mov arr[si],al
        inc si
        
        jmp INPUT_ 
        
        _              
    END_INPUT:
        mov arr[si],'$'
        mov si,-1
    
    
    outer_loop: 
         inc si  
         mov di,si
         cmp arr[si],'$'
         je result 
    
     inner_loop: 
         inc di
         cmp arr[di],'$'
         jz outer_loop
         
         ;;mem to mem not possible 
         mov bl,arr[di]
         cmp bl,arr[si]
         jge inner_loop 
         
         XCHG bl,arr[si]
         mov arr[di],bl 
         jmp inner_loop
       
    
    result:
     mov ah,9
     lea dx,output
     int 21h
     
     mov ah,9
     lea dx,arr
     int 21h
     
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;***********************************String Processing*******************************
1(a): case conversion
.MODEL SMALL 
.STACK 100H
.DATA

 MSG1 DB '      INPUT STRING : $'
 MSG2 DB 10,13,'AFTER CASE CONVERTION: $'
 
 ARR DB 100 DUP('$')
 
.CODE
          
               
          
MAIN PROC  
    
    
    MOV AX,@DATA
    MOV DS,AX 
    
    
    LEA DX,MSG1
    MOV AH,9
    INT 21H
         
    MOV SI,0
    MOV DI,0
       
    MOV AH,1 
    
    INPUT:
      
      INT 21H
      CMP AL,13;IF ENTER KEY IN PRESSED
      JE END_INPUT
      
      MOV ARR[SI],AL
      INC SI
      JMP INPUT 
      
    END_INPUT:
    MOV SI,-1  
    
    CASE_CONVERSION:
       
       INC SI
       CMP ARR[SI],'$'
       JE DISPLAY
       
       CMP ARR[SI],'A'
       JL NO_CHANGE
       CMP ARR[SI],'z'
       JG NO_CHANGE
       CMP ARR[SI],'Z'
       JLE TO_LOWER
       CMP ARR[SI],'a'
       JGE TO_UPPER
       
    NO_CHANGE:
      JMP CASE_CONVERSION
       
    TO_LOWER:
       ADD ARR[SI],32
       JMP CASE_CONVERSION 
       
    TO_UPPER: 
       SUB ARR[SI],32 
       JMP CASE_CONVERSION
    
       
       
    DISPLAY: 
    LEA DX,MSG2
    MOV AH,9
    INT 21H
    
    LEA DX,ARR
    MOV AH,9
    INT 21H

    
    EXIT:
    MOV AH,4CH
    INT 21H
    
    MAIN ENDP
END MAIN

;*************************************************************************


