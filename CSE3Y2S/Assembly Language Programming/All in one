;;;;;;;;;;;;;;;;;;;;;;;;;;;;;summation of n = 3+2+1
.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output db 10,13,'sum = $'
   
   sum db '0'
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    lea dx,input
    mov ah,9 
    int 21h 
    
    ;take input
    mov ah ,1
    int 21h 
    
    ;checkis it 0
    
    cmp al,'0'
    je result
    
    ; 
    xor cx,cx
    mov cl,al
    sub cl,48
    
    
    loop_: 
    add sum,cl
    Loop loop_:
    
    
    
    result: 
    mov ah,9
    lea dx,output
    int 21h
    
    mov ah,2
    mov dl,sum
    int 21h
    
    
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN

;;;;;;;;;;;;;;;;;;;;;


FACTORILA OF A NUMBER ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output db 10,13,'fact  = $'
  
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    int 21h 
    
   
    
    ;converting to digit
    sub al,48 
    ;initialization
    xor cx,cx 
    mov cl,al
    mov al,1  
    mov bl,1
    
    ;check input is it zero
    cmp cl,0
    je result
   
    
    
    
    fact: 
    mul cl ;al=al*cl
    Loop fact
    
     
    
    
    mov bl,al 
    result: 
    mov ah,9
    lea dx,output
    int 21h
     
                          
                          
    ;converting to ascchi
    add bl,48
    mov ah,2
    mov dl,bl
    int 21h
    

    
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;























;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CHECK A NUMBER IS EVEN OR ODD










.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output1 db 10,13,'The number os odd $' 
   output2 db 10,13,'The number os even $'
  
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    int 21h  
    
    
    test al,1
    jz even
    
    odd: 
        
        mov ah,9
        lea dx,output1
        int 21h 
        jmp exit
    even:
    
        mov ah,9
        lea dx,output2
        int 21h

    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN








;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   CHECK PRIME OR NOT;;;;;;;;;;;;;;;;;;;;;;;;



.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output1 db 10,13,'The number is prime $' 
   output2 db 10,13,'The number is not prime $'
   n db ?
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    int 21h
    
    ;ascci to digit and initialization
    sub al,48
    mov n,al
    mov ah,0   
    xor cx,cx
    mov cl,al
    sub cl,1
    
    check:
      cmp cl,1
      je result  
      div cl ; (quotioent)al=ax/bl, (remainder)ah= ax % bl
      cmp ah,0 
      jz not_prime
      
      xor ax,ax
      mov al,n 
      
     Loop check
    
      
   result: 
   
   prime:
       mov ah,9
       lea dx,output1
       int 21h
       jmp exit 
       
   not_prime:
     mov ah,9
     lea dx,output2
     int 21h 
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;FIND A LARGEST NUMBER *****************************************
.model small
.stack 100h
.data  
   input db 'Enter a number(1-3): $'
   output db 10,13,'The largest number is :  $' 

   n db '0'
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    
    ;take input
    mov ah,1
    INPUT_: 
     
        INT 21H
        CMP AL,13 ;IF ENTER IS PRESSED
        JE END_INPUT    
        
        CMP n,AL 
        JL UPDATE 
        
        JMP INPUT_  
        
    UPDATE:
     mov n,AL
     jmp INPUT_
      
        
    END_INPUT: 
 
   
     MOV AH,9
     LEA DX,output
     int 21h
     
     
     mov dl,n
     mov ah,2
     int 21H
 
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN

;************************************************************

;SORTING ASCENDING

.model small
.stack 100h
.data  
   input db 'Enter a input string(1-3): $'
   output db 10,13,'The acsending order is :  $' 
   
   arr db 100 dup('$')
   
.code

MAIN PROC  
    
    mov ax,@data
    mov ds,ax 
    
    
    ;show input msg
    mov ah,9
    lea dx,input  
    int 21h 
    
    ;initialization
    
    mov si,0
    mov di,0
    
    
    ;take input
    mov ah,1
    INPUT_: 
        
        int 21h
        cmp al,13   ;if enter key is pressed
        je END_INPUT
        
        mov arr[si],al
        inc si
        
        jmp INPUT_ 
        
        _              
    END_INPUT:
        mov arr[si],'$'
        mov si,-1
    
    
    outer_loop: 
         inc si  
         mov di,si
         cmp arr[si],'$'
         je result 
    
     inner_loop: 
         inc di
         cmp arr[di],'$'
         jz outer_loop
         
         ;;mem to mem not possible 
         mov bl,arr[di]
         cmp bl,arr[si]
         jge inner_loop 
         
         XCHG bl,arr[si]
         mov arr[di],bl 
         jmp inner_loop
       
    
    result:
     mov ah,9
     lea dx,output
     int 21h
     
     mov ah,9
     lea dx,arr
     int 21h
     
    
    exit:
    mov ah,4ch
    int 21h
    
    MAIN ENDP 
END MAIN
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;***********************************String Processing*******************************
1(a): case conversion
.MODEL SMALL 
.STACK 100H
.DATA

 MSG1 DB '      INPUT STRING : $'
 MSG2 DB 10,13,'AFTER CASE CONVERTION: $'
 
 ARR DB 100 DUP('$')
 
.CODE
          
               
          
MAIN PROC  
    
    
    MOV AX,@DATA
    MOV DS,AX 
    
    
    LEA DX,MSG1
    MOV AH,9
    INT 21H
         
    MOV SI,0
    MOV DI,0
       
    MOV AH,1 
    
    INPUT:
      
      INT 21H
      CMP AL,13;IF ENTER KEY IN PRESSED
      JE END_INPUT
      
      MOV ARR[SI],AL
      INC SI
      JMP INPUT 
      
    END_INPUT:
    MOV SI,-1  
    
    CASE_CONVERSION:
       
       INC SI
       CMP ARR[SI],'$'
       JE DISPLAY
       
       CMP ARR[SI],'A'
       JL NO_CHANGE
       CMP ARR[SI],'z'
       JG NO_CHANGE
       CMP ARR[SI],'Z'
       JLE TO_LOWER
       CMP ARR[SI],'a'
       JGE TO_UPPER
       
    NO_CHANGE:
      JMP CASE_CONVERSION
       
    TO_LOWER:
       ADD ARR[SI],32
       JMP CASE_CONVERSION 
       
    TO_UPPER: 
       SUB ARR[SI],32 
       JMP CASE_CONVERSION
    
       
       
    DISPLAY: 
    LEA DX,MSG2
    MOV AH,9
    INT 21H
    
    LEA DX,ARR
    MOV AH,9
    INT 21H

    
    EXIT:
    MOV AH,4CH
    INT 21H
    
    MAIN ENDP
END MAIN

;*************************************************************************
;*******************STRING REVERSINH***************************************
.MODEL SMALL 
.STACK 100H
.DATA

 MSG1 DB '      INPUT STRING  : $'
 MSG2 DB 10,13,'AFTER REVERSAL: $'
 
 ARR DB 100 DUP('$')
 
.CODE
          
               
          
MAIN PROC  
    
    
    MOV AX,@DATA
    MOV DS,AX 
    
    
    LEA DX,MSG1
    MOV AH,9
    INT 21H
         
    MOV SI,0
    MOV DI,0
       
    MOV AH,1 
    
    INPUT:
      
      INT 21H
      CMP AL,13;IF ENTER KEY IN PRESSED
      JE END_INPUT
      
      MOV ARR[SI],AL
      INC SI
      JMP INPUT 
      
    END_INPUT:
    MOV DI,SI
    MOV SI,-1
    
    REVERSE:
      INC SI
      DEC DI 
      CMP SI,DI 
      JG DISPLAY
      MOV BL,ARR[SI]
      XCHG BL,ARR[DI] 
      MOV ARR[SI],BL
      JMP REVERSE
       
    DISPLAY: 
    LEA DX,MSG2
    MOV AH,9
    INT 21H
    
    LEA DX,ARR
    MOV AH,9
    INT 21H

    
    EXIT:
    MOV AH,4CH
    INT 21H
    
    MAIN ENDP
END MAIN
;**********************************************
;*********REVERSE USING STACK*******************************

 ;STRING REVERSE USING STACK
.MODEL SMALL 
.STACK 100H
.DATA

 MSG1 DB '      INPUT STRING  : $'
 MSG2 DB 10,13,'AFTER REVERSAL: $'
 
 ARR DB 100 DUP('$')
 
.CODE
          
               
          
MAIN PROC  
    
    
    MOV AX,@DATA
    MOV DS,AX 
    
    
    LEA DX,MSG1
    MOV AH,9
    INT 21H
       
    MOV AH,1 
    MOV CX,0
    
    INPUT:
      
      INT 21H
      CMP AL,13;IF ENTER KEY IN PRESSED
      JE END_INPUT
      
      PUSH AX
      INC CX
      JMP INPUT 
      
    END_INPUT:
    ;NEWLINE
    MOV AH,9
    LEA DX,MSG2
    INT 21H
    
    MOV AH,2
    REVERSE:
      POP DX 
      INT 21H
      LOOP REVERSE
       

    
    EXIT:
    MOV AH,4CH
    INT 21H
    
    MAIN ENDP
END MAIN
;*************************************************

;************FIND FIRST CAPITAL AND LAST CAPITAL********************************

 ;FIND OUT FIRST CAPITAL AND LAST CAPITAL 
.MODEL SMALL
.STACK 100H
.DATA 
MSG1 DB 'INPUT STRING : $'
MSG2 DB 10,13,'FIRST CAPITAL : $'
MSG3 DB 10,13,'LAST CAPITAL  : $'
MSG4 DB 10,13,'NO CAPITAL $'

FC DB 91
LC DB 64


.CODE
MAIN PROC 
    
    MOV AX,@DATA
    MOV DS,AX 
    
    
    MOV AH,9
    LEA DX,MSG1 
    INT 21H   
    
    MOV AH,1
    INPUT:   
    
        INT 21H
        CMP AL,13
        JE END_INPUT
        
        CMP AL,'Z'
        JG INPUT
        CMP AL,'A'
        JL INPUT
        
        CMP AL,FC
        JL UPDATE_FC
        
        CMP AL,LC
        JG UPDATE_LC  
        
        
        
        JMP INPUT
        
    UPDATE_FC:
    
        MOV FC,AL
 
       ;SAY ONLY ONE INPUT
       CMP LC,AL
       JL UPDATE_LC
         
       JMP INPUT
        
    UPDATE_LC: 
    
        MOV LC,AL
        JMP INPUT
    
        
    END_INPUT: 
    
    CMP LC,64
    JE NO_CAPITAL
    
 
    PRINT:
            
    MOV AH,9
    LEA DX,MSG2
    INT 21H   
    ;PRINT FC
    MOV AH,2
    MOV DL,FC
    INT 21H 
    ;PRINT LC
    MOV AH,9
    LEA DX,MSG3
    INT 21H  
    MOV AH,2
    MOV DL,LC
    INT 21H
    JMP EXIT
    
    
        
    NO_CAPITAL:
        MOV AH,9       
        LEA DX,MSG4
        INT 21H
    
    EXIT:
    MOV AH,4CH
    INT 21H
    
    MAIN ENDP
END MAIN



;**********************COUNT VOWEL ,CONSONANT,DIGIT ,SPACE AND SPECIAL CHARACTER*************
.MODEL SMALL
.STACK 100H
.DATA 
MSG1 DB             'INPUT STRING   :$'
MSG2 DB 10,13,'NUMBER OF VOWELS     : $'
MSG3 DB 10,13,'NUMBER OF CONSONANT  : $'
MSG4 DB 10,13,'NUMBER OF DIGIT      : $'
MSG5 DB 10,13,'NUMBER OF SPACE      : $' 
MSG6 DB 10,13,'NUMBER OF SPECIAL    : $'

VOWEL      DB '0'
CONSONANT  DB '0'
DIGIT      DB '0'
SPACE      DB '0' 
SPECIAL    DB '0'  

VW DB 'AEIOUaeiou$'
DG DB '0123456789$'


.CODE
MAIN PROC 
    
    MOV AX,@DATA
    MOV DS,AX 
    
    
    MOV AH,9
    LEA DX,MSG1 
    INT 21H   
    
    MOV AH,1
    INPUT:   
    
        INT 21H
        CMP AL,13
        JE END_INPUT
                  
                  
        ;CHECK SPACE
        CMP AL,' '  
        JE UPDATE_SPACE 
        
        ;CHECK VOWEL
        MOV SI,-1
        MOV CX,10
        CHECK_V:
            INC SI
            CMP AL,VW[SI]
            JE UPDATE_VOWEL
            LOOP CHECK_V
             
        ;CHECK DIGIT
        MOV CX,10
        MOV SI,-1
        CHECK_D: 
            INC SI
            CMP AL,DG[SI]
            JE UPDATE_DIGIT
            LOOP CHECK_D
        
        ;CONSONAT CHECK
        CMP AL,'A'
        JL UPDATE_SPECIAL
        CMP AL,'z'
        JG UPDATE_SPECIAL
        CMP AL,'Z'
        JLE UPDATE_CONSONANT
        CMP AL,'a'
        JGE UPDATE_CONSONANT
        
        
        ;
        JMP UPDATE_SPECIAL 
       
            
   
         
    UPDATE_SPACE:
        INC SPACE
        JMP INPUT
           
    UPDATE_VOWEL:
        INC VOWEL
        JMP INPUT
        
    UPDATE_CONSONANT:
        INC CONSONANT
        JMP INPUT
        
    UPDATE_DIGIT:
        INC DIGIT
        JMP INPUT  
        
    UPDATE_SPECIAL: 
        INC SPECIAL
        JMP INPUT
    
        
    END_INPUT: 
    
    ;PRINT
    PRINT:
        ;VOWEL 
        MOV AH,9
        LEA DX,MSG2 
        INT 21H
        ;
        MOV AH,2
        MOV DL,VOWEL
        INT 21H
        
        ;CONSONANT
        MOV AH,9
        LEA DX,MSG3 
        INT 21H
        ;
        MOV AH,2
        MOV DL,CONSONANT
        INT 21H
        
        ;DIGIT
        MOV AH,9
        LEA DX,MSG4 
        INT 21H
        ;
        MOV AH,2
        MOV DL,DIGIT
        INT 21H
        
        ;SPACE
        MOV AH,9
        LEA DX,MSG5 
        INT 21H
        ;
        MOV AH,2
        MOV DL,SPACE
        INT 21H
        
        ;SPECIAL
        MOV AH,9
        LEA DX,MSG6 
        INT 21H
        ;
        MOV AH,2
        MOV DL,SPECIAL
        INT 21H
        

    
   
    
    EXIT:
    MOV AH,4CH
    INT 21H
    
    MAIN ENDP
END MAIN






;*****************************************************
;*******************SUBSTRING FINDING******************************
;PATTERN MATCHING
.MODEL SMALL
.STACK 100H
.DATA  

TEXT        DB 'HELLO WORLD$'
PATTERN     DB 'WORLD$'
FOUND       DB 'PATTER IS FOUND$'
NOT_FOUND   DB 'PATTERN IS NOT FOUND$'

.CODE
MAIN PROC 
    
    
    MOV AX,@DATA
    MOV DS,AX 
             
     
    MOV SI,0
    MOV DI,0
    SEARCH:
        CMP TEXT[SI],'$'
        JE PRINT 
        
        MOV BL,TEXT[SI] 
        CMP BL,PATTERN[DI]
        JE UPDATE_INDEX
        
        INC SI 
        CMP DI,0;PARTIAL SO AGAIN SEARCH FRM PATTERN 0
        JE JMP SEARCH
        MOV DI,0
        JMP SEARCH
        
        
    UPDATE_INDEX:
        INC SI
        INC DI 
        CMP PATTERN[DI],'$'
        JE FOUND_
        JMP SEARCH   
        
    PRINT:
       JMP NOT_FOUND_
         
    FOUND_:
        MOV AH,9
        LEA DX,FOUND
        INT 21H
        JMP EXIT 
        
    NOT_FOUND_:  
        MOV AH,9
        LEA DX,NOT_FOUND
        INT 21H
        JMP EXIT
    
    EXIT:
    MOV AH,4CH
    INT 21H
    MAIN ENDP
END MAIN
;************************************************************

